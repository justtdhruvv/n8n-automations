{
  "name": "lead gen scraper w linked in",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1072,
        496
      ],
      "id": "f522a12f-fe5d-41d4-a1d2-df3573ab9bde",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://google.serper.dev/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-API-KEY",
              "value": "f2fbe9ede522eef73fbed5db8522171a27dc9a85"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"q\": \"{{ $json.search_query }}\",\n  \"num\": 50\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -624,
        496
      ],
      "id": "a7684f2f-27b6-458a-875a-0536179d6c9e",
      "name": "Serper Search",
      "credentials": {
        "httpHeaderAuth": {
          "id": "kEC10DHQC1zaWMKO",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Serper returns JSON with \"organic\" results array\nconst results = items[0].json.organic || [];\nconst leads = [];\n\nfor (const r of results) {\n  if (!r.link) continue;\n\n  leads.push({\n    json: {\n      company_name: (r.title || \"\").replace(/\\|.*$/, \"\").trim(),\n      website: r.link,\n      snippet: r.snippet || \"\",\n      status: \"raw_from_serper\"\n    }\n  });\n}\n\nreturn leads;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        496
      ],
      "id": "b4647bad-bdbd-400d-ad85-dc177c2dfd4e",
      "name": "parse search results"
    },
    {
      "parameters": {
        "jsCode": "// Get all the leads from the previous node\nconst leads = $input.all().map((item) => item.json);\n\n// This is our new, smarter blocklist. It looks for patterns, not just names.\nconst junkKeywords = [\n  'top 10', 'top 20', 'best agencies', 'best companies', 'top rated',\n  'reviews of', 'list of', 'directory of', 'find the best', 'agencies in',\n  'firms in', 'jobs in', 'has anyone', 'reddit.com', 'youtube.com',\n  'indeed.com', 'glassdoor.com', 'clutch.co', 'designrush.com',\n  'goodfirms.co', 'themanifest.com'\n];\n\nconst normalizedLeads = leads\n  .map((lead) => {\n    // Clean up the company name and website URL\n    let cleanCompanyName = lead.company_name\n      .split(' - ')[0]\n      .split(' • ')[0]\n      .split(' (@')[0]\n      .trim();\n    \n    let cleanWebsite = lead.website.trim();\n    if (cleanWebsite.endsWith('/')) {\n      cleanWebsite = cleanWebsite.slice(0, -1);\n    }\n    \n    return {\n      company_name: cleanCompanyName,\n      website: cleanWebsite,\n      original_title: lead.title, // Keep the original title for checking\n      original_snippet: lead.snippet, // Keep the original snippet for checking\n      status: \"normalized\"\n    };\n  })\n  .filter((lead) => {\n    // Now, check if the original title or website contains any junk keywords\n    const textToSearch = (lead.original_title + ' ' + lead.website).toLowerCase();\n    \n    const isJunk = junkKeywords.some(keyword => textToSearch.includes(keyword));\n    \n    // Return true only if it's NOT junk\n    return !isJunk;\n  });\n\nreturn normalizedLeads;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        496
      ],
      "id": "da036391-d3d9-4ceb-8756-011a81be59eb",
      "name": "Normalize leads",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        48,
        496
      ],
      "id": "6c635fe2-167c-4625-b426-f6c943d021e7",
      "name": "Loop Over Items",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "amount": 1.5
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        272,
        496
      ],
      "id": "2bc0692f-8c5d-4833-997f-02072199be07",
      "name": "Wait",
      "webhookId": "8e6e905b-6613-4d83-9c4d-15dacbdd171d"
    },
    {
      "parameters": {
        "url": "=http://api.scraperapi.com",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "api_key",
              "value": "c144986a1a12b1d3037b0304177dd65b"
            },
            {
              "name": "url",
              "value": "={{ $json.website }}"
            },
            {
              "name": "render",
              "value": "true"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {}
          },
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        496,
        496
      ],
      "id": "bd3e3bea-b145-43d2-963a-5e1184dca9a5",
      "name": "Fetch Homepage",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the following HTML and extract all contact details: {{ $json.data }}",
        "options": {
          "systemMessage": "=## System Prompt\nYou are an expert-level Data Extraction Bot. Your sole purpose is to meticulously analyze raw HTML content from a company's webpage and extract every possible piece of contact information. You must be thorough, accurate, and systematic in your approach.\n\n## Your Task\n\nYou will be given raw HTML as input. Your task is to parse this HTML and identify all contact details. You must then structure this information into a single, clean Markdown table.\n\n## Information to Extract\n\nYou must find the following types of information:\n\nContact-Related Page Links:\n\nScour all <a> tags.\n\nIdentify any link that helps a user contact or learn more about the company.\n\nLook for anchor text containing keywords like: Contact, About Us, Support, Connect, Get in Touch, Help, Locations, Careers, Press, Inquiries.\n\nExtract the full, absolute URL from the href attribute. If the link is relative (e.g., /contact), construct the full URL based on the main website's domain.\n\nCapture the link's anchor text (the visible text of the link).\n\nEmail Addresses:\n\nSearch for all mailto: links within href attributes.\n\nScan the entire text content of the HTML for email address patterns (e.g., name@domain.com). Be thorough, as they are often not in <a> tags.\n\nPhone Numbers:\n\nSearch for all tel: links within href attributes.\n\nScan the entire text content for common phone number formats, including international codes, extensions, and different uses of parentheses, dashes, and spaces.\n\nPhysical Addresses:\n\nLook for structured address formats, often found in the page <footer> or within elements with classes like address or location.\n\nIdentify components like street names, city, state/province, postal codes, and country.\n\nPay attention to schema.org/PostalAddress microdata if present.\n\nOther Contact Methods:\n\nSocial Media: Extract links to primary social media platforms like LinkedIn, X (Twitter), Facebook, Instagram, etc.\n\nContact Forms: If you find a link to a page that contains a contact form, list that URL.\n\n## Output Format\n\nYou MUST format your entire output as a \n\n  {\n    \"Contact Method\": \"Contact Page Link\",\n    \"Detail\": \"https://www.tmpb2b.com/en-gb/contact-us\",\n    \"Notes / Source Text\": \"Contact us, Talk to us, Connect with us\"\n  },\n  {\n    \"Contact Method\": \"About Page Link\",\n    \"Detail\": \"https://www.tmpb2b.com/en-gb/about\",\n    \"Notes / Source Text\": \"About us, Read all about us\"\n  },\n  {\n    \"Contact Method\": \"Careers Page Link\",\n    \"Detail\": \"https://www.tmpb2b.com/en-gb/culture-and-careers\",\n    \"Notes / Source Text\": \"Careers\"\n  },\n  {\n    \"Contact Method\": \"LinkedIn Profile\",\n    \"Detail\": \"https://www.linkedin.com/company/the-marketing-practice/posts/?feedView=all\",\n    \"Notes / Source Text\": \"LinkedIn\"\n  },\n  {\n    \"Contact Method\": \"Instagram Profile\",\n    \"Detail\": \"https://www.instagram.com/themarketingpractice/?hl=en\",\n    \"Notes / Source Text\": \"Instagram\"\n  }\n\nso it flows well in n8n \n\n\nIf you dont get any available emails on the home page  then write no emails found on email page but only after a thorough check to never miss onee !"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        720,
        496
      ],
      "id": "a5a73b78-606f-43fc-8662-3fc32b3f9db4",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        800,
        720
      ],
      "id": "c231f695-98ca-49ee-a03c-d2a5efe39b90",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "xl9kWqVL9EB1VxPp",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8b63ae6a-cf26-4a3e-882d-d2e6cdae34b1",
              "name": "search_query",
              "value": "Marketing and Advertising agencies in Canada",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -848,
        496
      ],
      "id": "320032d3-2af0-47ca-8434-af9a5090ee4f",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "url": "http://api.scraperapi.com",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "api_key",
              "value": "c144986a1a12b1d3037b0304177dd65b"
            },
            {
              "name": "url",
              "value": "={{ $json.Detail }}"
            },
            {
              "name": "render",
              "value": "true"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "redirect": {
            "redirect": {}
          },
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1520,
        704
      ],
      "id": "acadee02-d9f4-43cb-8fcf-8008801bd8ad",
      "name": "HTTP Request1",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the following HTML and extract all contact details:  {{ $json.data }}",
        "options": {
          "systemMessage": "## System Prompt\nYou are a specialist data extractor. Your only goal is to find email addresses and phone numbers within the provided HTML of a company's contact page.\n\n## Your Task\n1.  Meticulously scan the entire HTML for any email addresses (mailto: links or plain text) and any phone numbers (tel: links or plain text in various formats).\n2.  If you cannot find any direct emails or phone numbers, check for the presence of a contact form (look for <form> tags associated with text like \"contact us,\" \"send a message,\" or \"get in touch\").\n3.  You MUST output your findings as a single, clean JSON object. Do not provide any text, explanation, or markdown fences before or after the JSON.\n\n## Output Format\nYour entire output must be ONLY the JSON object, structured exactly like this:\n{\n  \"emails\": [\"email@example.com\", \"another@example.com\"],\n  \"phones\": [\"+1-555-123-4567\", \"(555) 987-6543\"],\n  \"contact_form_present\": true,\n  \"summary\": \"Found two emails and a contact form on the page.\"\n}\n\n## Rules\n- If no emails are found, the \"emails\" array should be empty: [].\n- If no phone numbers are found, the \"phones\" array should be empty: [].\n- If no contact form is detected, \"contact_form_present\" should be false.\n- The summary should be a brief, one-sentence description of what you found."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1744,
        592
      ],
      "id": "d6176a0a-b6a5-46d9-a2cb-7f91c1205086",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1824,
        816
      ],
      "id": "16456c34-463d-41be-b5d5-b8ec21e29e5c",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "xl9kWqVL9EB1VxPp",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// This node receives all the separate findings from the deep scan\nconst allItems = $input.all();\nconst aggregatedResult = {\n  emails: [],\n  phones: [],\n  contact_form_present: false,\n  summaries: []\n};\n\n// Loop through each finding (from the about page, contact page, etc.)\nfor (const item of allItems) {\n  // 1. Get the raw string from the 'output' field.\n  const rawOutput = item.json.output;\n  if (!rawOutput) continue; // Skip if the AI returned nothing.\n\n  try {\n    // 2. Clean the string to remove markdown and get the pure JSON.\n    const jsonString = rawOutput.replace(/```json\\n|\\n```/g, '').trim();\n    if (!jsonString) continue; // Skip if the string is empty after cleaning.\n\n    // 3. Parse the string into a usable object. THIS IS THE STEP WE MISSED.\n    const data = JSON.parse(jsonString);\n\n    // 4. Now, the original aggregation logic will work on the clean data.\n    if (data.emails && data.emails.length > 0) {\n      aggregatedResult.emails.push(...data.emails);\n    }\n    if (data.phones && data.phones.length > 0) {\n      aggregatedResult.phones.push(...data.phones);\n    }\n    if (data.contact_form_present) {\n      aggregatedResult.contact_form_present = true;\n    }\n    if (data.summary) {\n      aggregatedResult.summaries.push(data.summary);\n    }\n  } catch (error) {\n    // This will prevent the workflow from crashing if the AI returns bad JSON.\n    console.error(\"Could not parse AI output:\", item.json.output, error);\n  }\n}\n\n// IMPORTANT: Remove any duplicate emails or phone numbers\naggregatedResult.emails = [...new Set(aggregatedResult.emails)];\naggregatedResult.phones = [...new Set(aggregatedResult.phones)];\n\n// Return a single, clean object with all the combined results\nreturn [{ json: aggregatedResult }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2096,
        704
      ],
      "id": "326f4a17-d92e-48b9-aead-a82157ecb843",
      "name": "output combiner"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2672,
        496
      ],
      "id": "3424d0f2-2a8a-407a-bf0e-1a0acbc1be28",
      "name": "Merge"
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "useDataOfInput": 2
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2384,
        576
      ],
      "id": "0f9fdc71-6def-4b43-b53c-49990a3b9c23",
      "name": "Merge1"
    },
    {
      "parameters": {
        "content": "### Section 1: Initialization & Search 🚀\nThis section's job is to take your input and get a list of potential websites from Google.\n\nManual Trigger: The \"Go\" button for the entire workflow.\n\nEdit Fields (Set): This is your control panel.\n\nPurpose: To define the Google search query for this run.\n\nKey Config: The search_query variable is set here (e.g., \"web designing agency ahmedabad\").\n\nSerper Search: The Google searcher.\n\nPurpose: Executes a Google search using the query from the \"Edit Fields\" node.\n\nKey Config: The q parameter in the JSON body is set to {{ $json.search_query }}",
        "height": 624,
        "width": 656
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1136,
        32
      ],
      "id": "cf647abb-e5c9-4229-bdeb-ebd6ed29daff",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "### Section 2: Lead Parsing & Smart Filtering 🧹\nThis section cleans up the raw Google results and removes junk.\n\nparse search results: The first cleanup step.\n\nPurpose: Converts the raw, complex JSON from Serper into a simple list of leads containing company_name, website, and snippet.\n\nNormalize leads: The smart filter.\n\nPurpose: Cleans up the company names and website URLs. Most importantly, it filters out directories (clutch.co, designrush.com) and junk results (youtube, reddit, job listings) by searching for keywords in the search result titles.\n\nOutput: A clean list of high-quality leads to be processed.",
        "height": 624,
        "width": 448,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -464,
        32
      ],
      "id": "50840f26-3223-42ab-8367-6f0019654d00",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "### Section 3: Main Loop & Homepage Scraping 🔄\nThis section processes each lead from the clean list, one by one.\n\nLoop Over Items: The engine of the workflow.\n\nPurpose: Takes the list of leads and processes them sequentially.\n\nKey Config: Batch Size is set to 1 to ensure it processes one company completely before starting the next.\n\nWait: The politeness node.\n\nPurpose: Pauses for 1.5 seconds between requests to avoid overwhelming a company's server.\n\nFetch Homepage: The first scraper.\n\nPurpose: Scrapes the full HTML content of the lead's main website.\n\nKey Config: The url parameter is set to ={{ $json.website }} from the looped item.",
        "height": 1056,
        "width": 640,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        -400
      ],
      "id": "20069f95-c354-49d3-9ea5-236893129651",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "### Section 4: Homepage Analysis (First Pass AI) 🤖\nThis section does a quick scan of the homepage to find potential clues.\n\nAI Agent: The generalist investigator.\n\nPurpose: Analyzes the raw HTML of the homepage.\n\nKey Config: Its system prompt asks it to find all potential contact links, social media profiles, and any other contact info, and to format it as a table.\n\nFormat output: The data splitter.\n\nPurpose: Takes the single text output from the AI and splits it into multiple separate items (one for each link, one for each email found, etc.).",
        "height": 976,
        "width": 576,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        656,
        -112
      ],
      "id": "749b8293-a8a8-4a48-ac23-65f6282db245",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "jsCode": "// Get the input string from the previous node\nconst rawOutput = items[0].json.output;\n\n// 1. Clean the string to remove the Markdown \"```json\" fences\n//    This isolates the pure JSON array text.\nconst jsonString = rawOutput.replace(/```json\\n|\\n```/g, '');\n\n// 2. Parse the clean string into a JavaScript array\nconst dataArray = JSON.parse(jsonString);\n\n// 3. Return the data so n8n creates a separate item for each object\n//    This is the key step to get separate objects as the output.\nreturn dataArray.map(item => {\n  return {\n    json: item\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1072,
        496
      ],
      "id": "77565b8e-89b2-487f-ab2e-af96b7f8585d",
      "name": "Format output"
    },
    {
      "parameters": {
        "content": "### Section 5: Deep Scan Branch 🕵️‍♂️\nThis is the advanced part. It takes the clues from the homepage and investigates them further.\n\nIF Node: The gatekeeper.\n\nPurpose: Filters the items from the homepage scan, only allowing useful links (containing \"Contact\", \"About\", \"Career\", etc.) to pass through for a deeper scan.\n\nFetch Contact Page: The second scraper.\n\nPurpose: Scrapes the HTML of the specific internal pages (e.g., the About Us page) that the IF node allowed through.\n\nKey Config: The url parameter is set to ={{ $json.Detail }}.\n\nAI Agent1 (AI Deep Scan): The specialist investigator.\n\nPurpose: Analyzes the HTML from the internal pages with the single goal of finding emails and phone numbers.\n\nKey Config: Its system prompt asks it to return only a clean JSON object, making the data easy to use.",
        "height": 1024,
        "width": 720,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1264,
        -352
      ],
      "id": "8f614847-6bc8-4bab-814f-fc7ba0e4418c",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "### Section 6: Data Aggregation & Saving 💾\nThis is the final assembly line where all the data is collected and saved.\n\nAggregate Results: The collector.\n\nPurpose: Gathers all the findings from the multiple pages scanned in the deep scan branch and combines them into one clean object, removing any duplicate emails or phone numbers.\n\nMerge: The final assembler.\n\nPurpose: Combines the original lead info (company name, website) with the aggregated findings from the deep scan.\n\n",
        "height": 1008,
        "width": 672,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2240,
        -288
      ],
      "id": "63467c21-2c94-46a7-ba3d-6588ff68cafc",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze this page and give me the Details of this linked profile or company :  {{ $json.data }}",
        "options": {
          "systemMessage": "## System Prompt\nYou are an expert at analyzing the data from a LinkedIn company page. Your goal is to extract key business information.\n\n## Your Task\nAnalyze the provided data and extract the following details. If a detail is not present, use an empty string \"\" or null.\n\n## Output Format\nYou MUST output a single, clean JSON object. Do not use markdown.\n{\n  \"linkedin_summary\":,\n  \"employee_count\": ,\n  \"industry\": ,\n  \"headquarters\": \n  \"email\":.\n\"contact  details\":,\n\"adresss\":,\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2320,
        992
      ],
      "id": "cf5de1d9-6d5d-4703-adaa-d61f944cdcc8",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2400,
        1216
      ],
      "id": "375c3485-e8c3-4a91-991e-7373f8950e92",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "xl9kWqVL9EB1VxPp",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the raw output string from the AI Agent\nconst rawOutput = items[0].json.output;\n\n// Parse the JSON string into a real JavaScript object\nconst parsedData = JSON.parse(rawOutput);\n\n// Return the clean object for the next node to use\nreturn {\n  json: parsedData\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2672,
        992
      ],
      "id": "7f58a605-1500-42cf-a092-3d2c60e295b6",
      "name": "Linked in Details"
    },
    {
      "parameters": {
        "url": "=https://api.scrapingdog.com/linkedin",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "api_key",
              "value": "68b175137c263abbd1577f6e"
            },
            {
              "name": "type",
              "value": "company"
            },
            {
              "name": "linkId",
              "value": "={{ $json.linkId }}"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          },
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2096,
        992
      ],
      "id": "6dab3cf9-5b40-4bf7-9386-d8ededa48ded",
      "name": "LinkedIN scraper"
    },
    {
      "parameters": {
        "jsCode": "// Get the full LinkedIn URL from the incoming item\nconst fullUrl = items[0].json.Detail;\n\n// This logic safely splits the URL by '/' and gets the last part,\n// even if there's a trailing slash.\nconst parts = fullUrl.split('/').filter(part => part); // Split and remove empty parts\nconst linkId = parts[parts.length - 1];\n\n// Add the new 'linkId' field to the data\nitems[0].json.linkId = linkId;\n\n// Pass the updated item to the next node\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1808,
        992
      ],
      "id": "be249c72-dbe9-4d95-a6f0-7869420913b0",
      "name": "convert scrapable link"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6ab66308-bd6a-4545-ad5a-5de3ab4766aa",
              "leftValue": "={{ $json['Contact Method'] }}",
              "rightValue": "Contact Page Link",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "1f729687-7ba3-47ad-8e58-8e7c3bbb2fde",
              "leftValue": "={{ $json['Contact Method'] }}",
              "rightValue": "About Page Link",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "fe1d229e-e833-44c9-ad6e-07727dda37ff",
              "leftValue": "={{ $json['Contact Method'] }}",
              "rightValue": "Careers Page Link",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "faba28a0-d13b-4891-af75-a7f6358cc93b",
              "leftValue": "={{ $json['Contact Method'] }}",
              "rightValue": "LinkedIn Profile",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "63572f9d-3f08-4e84-8fd3-0f26933b7ef0",
              "leftValue": "={{ $json[\"Contact Method\"] }}",
              "rightValue": "Contact Form Link",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1296,
        704
      ],
      "id": "78bd2386-022c-43d9-9a2b-a5cc758a06bb",
      "name": "filter redirecting links"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "18501573-a673-401a-a0e1-6ce83883ef11",
              "leftValue": "={{ $json['Contact Method'] }}",
              "rightValue": "LinkedIn Profile",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1520,
        992
      ],
      "id": "060cf46c-a8c1-4c24-b90a-22359021e0ec",
      "name": "Filter Linked In specific link"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Serper Search": {
      "main": [
        [
          {
            "node": "parse search results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parse search results": {
      "main": [
        [
          {
            "node": "Normalize leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize leads": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Fetch Homepage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Homepage": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Format output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Serper Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "output combiner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "output combiner": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        []
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Format output": {
      "main": [
        [
          {
            "node": "filter redirecting links",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Linked in Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LinkedIN scraper": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "convert scrapable link": {
      "main": [
        [
          {
            "node": "LinkedIN scraper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter redirecting links": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter Linked In specific link",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Linked In specific link": {
      "main": [
        [
          {
            "node": "convert scrapable link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "242ba2c1-763b-4399-a9eb-ca659264d299",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "98ec8c37cf808af2d4467728c278701715561b3c0d43ee67781bc9f0c5e54cde"
  },
  "id": "hV8vGiKteUbcWOIX",
  "tags": []
}